
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!OPENAI_API_KEY) {
      return new Response(
        JSON.stringify({
          aiAnalysis: "AI analysis is currently unavailable (API key not configured).",
          aiConfidenceScore: 0,
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { text, existingMatches, performAuthenticityCheck } = await req.json();
    
    if (!text || text.length < 10) {
      return new Response(
        JSON.stringify({ error: "Text is too short for analysis" }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log(`Analyzing text of length ${text.length} chars with ${existingMatches?.length || 0} existing matches`);
    console.log(`Authenticity check requested: ${performAuthenticityCheck ? 'Yes' : 'No'}`);
    
    // We'll run plagiarism analysis first
    const plagiarismAnalysisPrompt = `
      As an expert in plagiarism detection, analyze the following text and the potential matches that were found through automated searching.
      
      Text to analyze:
      "${text.substring(0, 3000)}${text.length > 3000 ? '... (truncated)' : ''}"
      
      ${existingMatches && existingMatches.length > 0 ? `
      Potential matches found:
      ${existingMatches.map((match, i) => 
        `Match ${i+1}: "${match.text}" (Source: ${match.source}, Similarity: ${Math.round(match.similarity * 100)}%)`
      ).join('\n')}
      ` : 'No significant matches were found through automated searching.'}
      
      Analyze the probability that this text contains plagiarized content. Consider:
      1. The specificity and uniqueness of phrases
      2. Writing style consistency
      3. Technical terminology usage
      4. The relevance and quality of the matches found
      5. The overall context and subject matter
      
      Provide:
      1. A detailed analysis of potential plagiarism
      2. A confidence score from 0-100 representing how likely the text contains plagiarized content
      
      Format your response as JSON with keys 'aiAnalysis' (string) and 'aiConfidenceScore' (number).
    `;

    // Call OpenAI for plagiarism analysis
    const plagiarismResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'You are an expert in plagiarism detection and content analysis.' },
          { role: 'user', content: plagiarismAnalysisPrompt }
        ],
        temperature: 0.3,
        response_format: { type: 'json_object' }
      })
    });

    if (!plagiarismResponse.ok) {
      const errorText = await plagiarismResponse.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${plagiarismResponse.status} ${errorText}`);
    }

    const plagiarismData = await plagiarismResponse.json();
    const plagiarismResults = JSON.parse(plagiarismData.choices[0].message.content);
    
    let authenticityCheck = null;
    
    // If authenticity verification is requested, perform it
    if (performAuthenticityCheck) {
      console.log("Performing additional authenticity verification");
      
      const authenticityPrompt = `
        As a content authenticity expert, please analyze the following text to determine:
        1. Whether it was likely written by a human or generated by AI
        2. Its originality score
        3. Any indications of manipulation or plagiarism
        
        Text to analyze:
        "${text.substring(0, 2000)}${text.length > 2000 ? '... (truncated)' : ''}"
        
        Provide the following information:
        - Is the content likely authentic human-created content?
        - What is the probability it was AI-generated (0.0 to 1.0)?
        - What is the probability it has been manipulated or plagiarized (0.0 to 1.0)?
        - What is the originality score (0.0 to 1.0)?
        - A detailed explanation of your findings
        
        Format your analysis as JSON with keys: isAuthentic (boolean), aiGeneratedProbability (float), manipulationProbability (float), originalityScore (float), detailsText (string), verificationMethod (string).
      `;
      
      // Call OpenAI for authenticity verification
      const authenticityResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: 'You are an expert in content authenticity verification.' },
            { role: 'user', content: authenticityPrompt }
          ],
          temperature: 0.2,
          response_format: { type: 'json_object' }
        })
      });
      
      if (authenticityResponse.ok) {
        const authenticityData = await authenticityResponse.json();
        authenticityCheck = JSON.parse(authenticityData.choices[0].message.content);
        console.log("Authenticity verification completed successfully");
      } else {
        console.error("Authenticity verification failed:", await authenticityResponse.text());
      }
    }
    
    // Combine the results and return
    const finalResponse = {
      ...plagiarismResults,
      authenticityCheck
    };
    
    return new Response(
      JSON.stringify(finalResponse),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('AI analysis error:', error);
    return new Response(
      JSON.stringify({ 
        error: 'An error occurred during analysis',
        message: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
