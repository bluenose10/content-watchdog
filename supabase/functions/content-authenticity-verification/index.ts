
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (!openAIApiKey) {
    console.error('Missing OpenAI API key');
    return new Response(
      JSON.stringify({
        error: 'OpenAI API key is required for content authenticity verification'
      }),
      {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }

  try {
    const { content, contentType } = await req.json();
    console.log(`Authenticating ${contentType} content`);
    
    // Different handling based on content type
    let prompt = '';
    let inputContent = '';
    
    if (contentType === 'text') {
      // For text, we can directly use the content
      inputContent = typeof content === 'string' ? content : JSON.stringify(content);
      
      prompt = `As a content authenticity expert, please analyze the following text to determine:
      1. Whether it was likely written by a human or generated by AI
      2. Its originality score
      3. Any indications of manipulation or plagiarism
      
      Text to analyze:
      "${inputContent.substring(0, 2000)}"
      
      Provide the following information:
      - Is the content likely authentic human-created content?
      - What is the probability it was AI-generated (0.0 to 1.0)?
      - What is the probability it has been manipulated or plagiarized (0.0 to 1.0)?
      - What is the originality score (0.0 to 1.0)?
      - A detailed explanation of your findings
      
      Format your analysis as JSON with keys: isAuthentic (boolean), aiGeneratedProbability (float), manipulationProbability (float), originalityScore (float), detailsText (string), verificationMethod (string).`;
    } 
    else if (contentType === 'image') {
      // For images, we need to handle file data
      const fileData = typeof content === 'string' ? content : content.fileData;
      
      prompt = `As a content authenticity expert, please analyze the provided image to determine:
      1. Whether it was likely created by a human or generated by AI
      2. Its originality score
      3. Any indications of manipulation or digital alteration
      
      Provide the following information:
      - Is the image likely authentic human-created content?
      - What is the probability it was AI-generated (0.0 to 1.0)?
      - What is the probability it has been manipulated (0.0 to 1.0)?
      - What is the originality score (0.0 to 1.0)?
      - A detailed explanation of your findings
      
      Format your analysis as JSON with keys: isAuthentic (boolean), aiGeneratedProbability (float), manipulationProbability (float), originalityScore (float), detailsText (string), verificationMethod (string).`;
      
      // Image will be passed directly to OpenAI's vision model via URL or base64
      inputContent = fileData;
    }
    else {
      throw new Error(`Unsupported content type: ${contentType}`);
    }
    
    console.log('Sending request to OpenAI for authenticity verification');
    
    // Different API call based on content type
    let response;
    if (contentType === 'text') {
      response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: 'You are an expert in content authenticity verification.' },
            { role: 'user', content: prompt }
          ],
          temperature: 0.2,
          response_format: { type: 'json_object' }
        }),
      });
    } 
    else if (contentType === 'image') {
      // For images, use the vision model
      response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages: [
            { role: 'system', content: 'You are an expert in image authenticity verification.' },
            { 
              role: 'user', 
              content: [
                { type: 'text', text: prompt },
                { 
                  type: 'image_url', 
                  image_url: {
                    url: inputContent.startsWith('data:') || inputContent.startsWith('http') 
                      ? inputContent 
                      : `data:image/jpeg;base64,${inputContent}`
                  }
                }
              ]
            }
          ],
          temperature: 0.2,
          response_format: { type: 'json_object' }
        }),
      });
    }

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const verificationResults = JSON.parse(data.choices[0].message.content);
    
    console.log('Authenticity verification completed successfully');

    return new Response(
      JSON.stringify(verificationResults),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error in content-authenticity-verification function:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unexpected error occurred' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
